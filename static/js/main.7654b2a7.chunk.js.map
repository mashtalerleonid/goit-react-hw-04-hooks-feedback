{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["Section","title","children","Button","styled","button","FeedbackOptions","onLeaveFeedback","options","keys","Object","map","key","type","name","onClick","FeedbakcTypes","div","Type","p","Statistics","feedbackCount","total","positivePercentage","Notification","message","optionsText","good","neutral","bad","countReducer","state","actions","payload","App","useReducer","dispatch","countTotalFeedback","e","target","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAgBeA,I,EAAAA,EAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,gCACE,6BAAKD,IACJC,M,cCJMC,EAASC,IAAOC,OAAV,mDCqBJC,I,IAAAA,EApBf,YAAwD,IAA7BC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,QACpCC,EAAOC,OAAOD,KAAKD,GACzB,OACE,8BACGC,EAAKE,KAAI,SAACC,GACT,OACE,cAACT,EAAD,CAAkBU,KAAK,SAASC,KAAMF,EAAKG,QAASR,EAApD,SACGC,EAAQI,IADEA,SCPVI,EAAgBZ,IAAOa,IAAV,8CAIbC,EAAOd,IAAOe,EAAV,mDCwBFC,MA3Bf,YAA4E,IAAtDZ,EAAqD,EAArDA,QAASa,EAA4C,EAA5CA,cAAeC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC7Cd,EAAOC,OAAOD,KAAKD,GACzB,OACE,gCACE,cAACQ,EAAD,UACGP,EAAKE,KAAI,SAACC,GACT,OACE,eAACM,EAAD,WACGV,EAAQI,GADX,KACmBS,EAAcT,KADtBA,QAOjB,wCAAWU,KACX,oDAAuBC,EAAvB,WCdSC,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KCKPC,EAAc,CAClBC,KAAM,OACNC,QAAS,UACTC,IAAK,OAGP,SAASC,EAAaC,EAAOC,GAC3B,OAAQA,EAAQnB,MACd,IAAK,OACH,OAAO,2BAAKkB,GAAZ,IAAmBJ,KAAMI,EAAMJ,KAAOK,EAAQC,UAEhD,IAAK,UACH,OAAO,2BAAKF,GAAZ,IAAmBH,QAASG,EAAMH,QAAUI,EAAQC,UAEtD,IAAK,MACH,OAAO,2BAAKF,GAAZ,IAAmBF,IAAKE,EAAMF,IAAMG,EAAQC,UAE9C,QACE,QAIS,SAASC,IACtB,MAA0BC,qBAAWL,EAAc,CACjDH,KAAM,EACNC,QAAS,EACTC,IAAK,IAHP,mBAAOE,EAAP,KAAcK,EAAd,KAUA,SAASC,IACP,IAAIf,EAAQ,EACZ,IAAK,IAAMV,KAAOmB,EAChBT,GAASS,EAAMnB,GAEjB,OAAOU,EAMT,OACE,gCACE,cAAC,EAAD,CAASrB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEM,gBAnBR,SAAwB+B,GACtBF,EAAS,CAAEvB,KAAMyB,EAAEC,OAAOzB,KAAMmB,QAAS,KAmBnCzB,QAASkB,MAGZW,IACC,cAAC,EAAD,CAASpC,MAAM,aAAf,SACE,cAAC,EAAD,CACEO,QAASkB,EACTL,cAAeU,EACfT,MAAOe,IACPd,mBAhBDiB,KAAKC,MAAOV,EAAMJ,KAAOU,IAAwB,SAoBpD,cAAC,EAAD,CAAcZ,QAAS,yBC/D/BiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACV,EAAD,MAEFW,SAASC,eAAe,W","file":"static/js/main.7654b2a7.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nfunction Section({ title, children }) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import styled from \"@emotion/styled\";\n\nexport const Button = styled.button`\n  margin-right: 10px;\n`;\n","import PropTypes from \"prop-types\";\nimport { Button } from \"./FeedbackOptions.styled\";\n\nfunction FeedbackOptions({ onLeaveFeedback, options }) {\n  const keys = Object.keys(options);\n  return (\n    <div>\n      {keys.map((key) => {\n        return (\n          <Button key={key} type=\"button\" name={key} onClick={onLeaveFeedback}>\n            {options[key]}\n          </Button>\n        );\n      })}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func,\n  options: PropTypes.objectOf(PropTypes.string),\n};\n\nexport default FeedbackOptions;\n","import styled from \"@emotion/styled\";\n\nexport const FeedbakcTypes = styled.div`\n  display: flex;\n`;\n\nexport const Type = styled.p`\n  margin-right: 10px;\n`;\n","import { FeedbakcTypes, Type } from \"./Statistics.styled\";\nimport PropTypes from \"prop-types\";\n\nfunction Statistics({ options, feedbackCount, total, positivePercentage }) {\n  const keys = Object.keys(options);\n  return (\n    <div>\n      <FeedbakcTypes>\n        {keys.map((key) => {\n          return (\n            <Type key={key}>\n              {options[key]}: {feedbackCount[key]}\n            </Type>\n          );\n        })}\n      </FeedbakcTypes>\n\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </div>\n  );\n}\n\nStatistics.propTypes = {\n  state: PropTypes.objectOf(PropTypes.number),\n  options: PropTypes.objectOf(PropTypes.string),\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nexport default Notification;\n","import { useState, useReducer } from \"react\";\nimport Section from \"components/Section\";\nimport FeedbackOptions from \"components/FeedbackOptions\";\nimport Statistics from \"components/Statistics\";\nimport Notification from \"components/Notification\";\n\nconst optionsText = {\n  good: \"Good\",\n  neutral: \"Neutral\",\n  bad: \"Bad\",\n};\n\nfunction countReducer(state, actions) {\n  switch (actions.type) {\n    case \"good\":\n      return { ...state, good: state.good + actions.payload };\n\n    case \"neutral\":\n      return { ...state, neutral: state.neutral + actions.payload };\n\n    case \"bad\":\n      return { ...state, bad: state.bad + actions.payload };\n\n    default:\n      return;\n  }\n}\n\nexport default function App() {\n  const [state, dispatch] = useReducer(countReducer, {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  });\n\n  function handleFeedback(e) {\n    dispatch({ type: e.target.name, payload: 1 });\n  }\n\n  function countTotalFeedback() {\n    let total = 0;\n    for (const key in state) {\n      total += state[key];\n    }\n    return total;\n  }\n\n  function countPositiveFeedbackPercentage() {\n    return Math.round((state.good / countTotalFeedback()) * 100);\n  }\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          onLeaveFeedback={handleFeedback}\n          options={optionsText}\n        />\n      </Section>\n      {countTotalFeedback() ? (\n        <Section title=\"Statistics\">\n          <Statistics\n            options={optionsText}\n            feedbackCount={state}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      ) : (\n        <Notification message={\"No feedback given\"} />\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}